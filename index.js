import express from 'express'; //Importamos el framework Express, que nos va a ayudar a crear el servidor web
import { pool } from './db/config.js'; //Importamos el objeto pool de la config de la base de datos, lo usaremos para conectarnos
//y hacer consultas a pgSQL
import { obtenerJoyas, filtrarJoyas } from './controllers/joyasController.js'; //Importamos las funciones que se encargan de obtener y
//filtrar las joyas desde la base de datos

//Creamos una instancia de la aplicaci√≥n Express:
const app = express();
//Definimos el puerto en el que el servidor va a escuchar las peticiones:
const PORT = 3000;

//Ruta base de prueba de conexi√≥n
app.get('/', async (req, res) => {
  //esta ruta es √∫til para saber si la conexi√≥n a la base de datos funciona
  const result = await pool.query('SELECT NOW()'); //Realizamos una consulta simple a la bd para obtener la fecha y hora actual
  res.send(`Conexi√≥n exitosa: ${result.rows[0].now}`); //Se env√≠a una respuesta al navegador confirmando la conexi√≥n exitosa y la hora
});

//Ruta con paginaci√≥n, orden y l√≠mite. Ruta para obtener las joyas:
app.get('/joyas', async (req, res) => {
  try {
    // Llamamos a la funci√≥n obtenerJoyas del controlador, pas√°ndole los par√°metros de la URL (query):
    const joyas = await obtenerJoyas(req.query);
    //Enviamso las joyas obtenidas como respuesta en formato JSON:
    res.json(joyas);
  } catch (error) {
    //Si ocurre un error al obtener las joyas, lo registra en la consola del servidor:
    console.error('‚ùå Error en /joyas:', error);
    //Y se env√≠a el c√≥digo 500 (Error Interno del Servidor) y un mensaje de error:
    res.status(500).json({ error: 'Error al obtener las joyas' });
  }
});

//Ruta con filtros seguros y console.log. Ruta para filtrar las joyas evitando inyecciones SQL:
app.get('/joyas/filtros', async (req, res) => {
  try {
    //Registramos en la consola del servidor que se accedi√≥ a esta ruta y qu√© par√°metros se usaron:
    //Esto sirve como un middleware simple para generar reportes:
    console.log('üì• Se accedi√≥ a /joyas/filtros con:', req.query);
    //Llamamos a la funci√≥n filtrarJoyas del controlador, pas√°ndole los par√°metros de la URL:
    const joyasFiltradas = await filtrarJoyas(req.query);
    //Enviamos las joyas filtradas como respuesta en formato JSON tambi√©n:
    res.json(joyasFiltradas);
  } catch (error) {
    //Si ocurre un error al filtrar las joyas, se registra en la consola del servidor:
    console.error('‚ùå Error en /joyas/filtros:', error);
    //Y se env√≠a el c√≥digo 500 y su mensaje:
    res.status(500).json({ error: 'Error al filtrar joyas' });
  }
});

//Iniciamos el servidor Express para que escuche las peticiones en el puerto 3000:
app.listen(PORT, () => {
  //Y aqu√≠ mostramos un mensaje en la consola indicando que el servidor est√° funcionando y en qu√© URL:
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
